### API: https://pubs.vmware.com/vsphere-51/index.jsp#com.vmware.powercli.cmdletref.doc/Overview.html

## Variablize contest machines
$CONTEST = get-vm -Location “Contest *”

# Revert snapshots
foreach( $vm in $CONTEST ) { Set-VM -VM $vm –Snapshot ContestStart -Confirm:$false}
foreach( $vm in $CONTEST ) { start-vm $vm }

# Create snapshots option 1
get-vm -Location “Contest *” | New-Snapshot -Name ContestStart

# Create snapshots option 2
foreach( $vm in $CONTEST ) {New-Snapshot -VM $vm -Name ContestStart -Confirm 

## Create User Folders
# https://technet.microsoft.com/en-us/library/Ee692803.aspx
Get <Full Name> for <User> of group <CLASS>
For each <Full Name>
	Create folder in “CLASS *” with [CLASS] <Full Name>
	Assign “STUDENTS” role to folder “[CLASS] <Full Name> for <User>
	New-Folder -Name <String> -Location “CLASS *”
	New-VIPermission -Entity <FolderName> -Principal e229\<username> -Role STUDENTS
	New-VIPermission -Entity "IASBen" -Principal e229\bwelch -Role STUDENTS
	New-Folder -Name "Student1" -Location “IASBen”
	New-Folder -Name "Student2" -Location “IASBen”
	New-Folder -Name "Student3" -Location “IASBen”

## Deploy Kali
New-VM -Name <student -VM <Kali-template-0123> —Location <IAS311<student>> Datastore STOR-0 -DiskStorageFormat thin

## Deploy VM’s
student_clones=(student1 student2 student3)

for i in ${student_clones[@]}; do
        ./clone.sh basefolder ${i}

## Register missing vm’s
http://www.wooditwork.com/2011/08/11/adding-vmx-files-to-vcenter-inventory-with-powercli-gets-even-easier/
$VMXFile = “[STOR-0] SERVER01/SERVER01.vmx"
$VMXFile = “[STOR-1] SERVER01/SERVER01.vmx"
$VMFolder = Get-Folder "Prod Servers"
New-VM -VMFilePath $VMXFile -Location $VMFolder

## Destroy, Destroy, Destroy
$DESVM = get-vm -Location “Class111 *”
$DESFOL = get-folder -Location “Class111 *”
foreach ($vm in $DESVM) {Remove-VM -DeletePermanently -VM $vm -Confirm:$false}
foreach ($folder in $DESFOL) {Remove-Folder -Folder $folder -DeletePermanently}

### Samples
New-Folder -Name "BensClass" -Location “Classes”
New-VIPermission -Entity Classes -Principal dc01\bensclass -Role "Read-only"

## Should be dynamic
## Static here is still faster than by GUI
New-Folder -Name "Student1" -Location “IASBen”
New-VIPermission -Entity "Student01" -Principal dc01\boyobejamin -Role STUDENTS
New-Folder -Name "Student2" -Location “IASBen”
New-VIPermission -Entity "Student02" -Principal dc01\boyobejamin -Role STUDENTS
New-Folder -Name "Student3" -Location “IASBen”
New-VIPermission -Entity "Student03" -Principal dc01\boyobejamin -Role STUDENTS

## Insert deploy VM's here

$DESVM = get-vm -Location “BenClass”
$DESFOL = get-folder -Location “BenClass”
Remove-VM -DeletePermanently -VM <Virtual Machine> -WhatIf
Remove-Folder -Folder $folder -DeletePermanently  -WhatIf
foreach ($vm in $DESVM) {Remove-VM -DeletePermanently -VM $vm -Confirm:$false}
foreach ($folder in $DESFOL) {Remove-Folder -Folder $folder -DeletePermanently -Confirm:$false}

## Restart all VMs that start with the name "Thing"
get-vm -name Thing* | where-object  {$_.PowerState -eq "PoweredOn"} | restart-vmguest

# Migrate VMs to new Datastore
$DS = Get-Datastore MyNewAwesomeDS
$VMS = Get-Datastore OldDatastore | Get-VM
foreach ($VM in $VMs) { Move-VM -ds $DS -vm $VM }



	
